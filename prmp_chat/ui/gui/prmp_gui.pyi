__author__ = "PRMP Smart"


from prmp_miscs import *
from prmp_miscs import _PIL_, _CV2_
import tkinter as tk
import tkinter.ttk as ttk







# superclasses

'PRMP_GUI by PRMPSmart prmpsmart@gmail.com'



class PRMP_Theme(PRMP_GuiMixins):
    # exerpt from PySimpleGUI theming engine

    BLUES = ...
    PURPLES = ...
    GREENS = ...
    YELLOWS = ...
    TANS = ...
    NICE_BUTTON_COLORS = ...
    COLOR_SYSTEM_DEFAULT = ...
    
    DEFAULT_BUTTON_COLOR = ...
    
    OFFICIAL_PRMPSMART_BUTTON_COLOR = ...
    
    DEFAULT_ERROR_BUTTON_COLOR = ...
    
    DEFAULT_FOREGROUND_COLOR = ...
    
    DEFAULT_BACKGROUND_COLOR = ...
    
    DEFAULT_INPUT_ELEMENTS_COLOR = ...
    
    DEFAULT_INPUT_TEXT_COLOR = ...
    
    DEFAULT_SCROLLBAR_COLOR = ...
    
    DEFAULT_PROGRESS_BAR_COLOR = ...
    
    DEFAULT_PROGRESS_BAR_COMPUTE = ...
    
    DEFAULT_PROGRESS_BAR_COLOR_OFFICIAL = ...
    
    DEFAULT_HIGHLIGHT_BG = ...
    
    DEFAULT_HIGHLIGHT_BG = ...

    DEFAULT_RELIEF = ...

    THEMES_DICTS = ...

    CURRENT_THEME = ...

    DEFAULT_FONT = ...

    DEFAULT_MINUTE_FONT = ...

    BIG_FONT = ...

    DEFAULT_MENU_FONT = ...

    DEFAULT_BUTTON_FONT = ...
    DEFAULT_BUTTONS_FONT = ...
    DEFAULT_SMALL_BUTTON_FONT = ...

    DEFAULT_TITLE_FONT = ...

    DEFAULT_STATUS_FONT = ...


    DEFAULT_LABEL_FONT = ...

    DEFAULT_LABELFRAME_FONT = ...

    HEADING_FONT = ...

    NORMAL_FONT = ...

    PRMP_FONT = ...
    
    BIG_PRMP_FONT = ...

    PRMP_FONTS = ...

    themedWidgets = ...

    @classmethod
    def setTheme(cls, theme: str) -> None:
        '''
        theme: a key in PRMP_Theme.THEMES_DICTS
        '''

    @classmethod
    def setOptions(cls, button_color=None, progress_meter_color=None, background_color=None, input_elements_background_color=None, input_text_color=None, scrollbar_color=None, text_color=None):
        '''
        updating the global theme.
        '''
    @classmethod
    def themesList(cls): ...

    @classmethod
    def setThemeIndex(cls, num): ...

    @property
    def fontsNames(self): ...
    
    def dictFont(self, font): ...


    def parseFont(self, font, name=''):
        '''
        creates a new font if not existing, returns the font.
        '''

    def deriveFont(self, kwargs={}, default='DEFAULT_FONT'): ...

    def createDefaultFonts(self): ...
        
    def _prevTheme(self): ...
        
    def _nextTheme(self): ...
        
    def _paint(self): ...
        
    def _paintChildren(self): ...
        
    def _paintAll(self): ...
        
    def paint(self): ...
        
    @classmethod
    def updateTheme(cls): ...

    @classmethod
    def currentThemeIndex(cls): ...

    @classmethod
    def currentThemeDict(cls): ...

class PRMP_Widget(PRMP_Theme):
    # the tkinter widget to use for this widget.
    TkClass = None
    # the tips class to use for this widget.
    TipsClass = None
    # default PRMP window base class.
    PRMP_Window = None

    def after(self, time, func): ...

    @property
    def topest(self): ...

    @property
    def _children(self): ...

    @property
    def topest2(self): ...

    @property
    def toplevel(self): ... 

    def __init__(self, master, _ttk_=False, tipKwargs={}, tip={}, status='', relief='groove', nonText=False, asEntry=False, hl=None, highlightable=False, place={}, grid={}, pack={}, font='DEFAULT_FONT', config={}, **kwargs):
        '''
        master: another widget hosting this widget or None
        _ttk_: bool whether this widget is based on tkinter.ttk or not.
        tip or tipKwargs: dict of [Label options, follow, delay]
        status: text to show in the status bar; defaults to text of this widget.
        relief: defaults to PRMP's chosen relief 'GROOVE'
        nonText: bool whether this widget can have a text on it.
            Frame don't.
        asEntry: bool whether to style widget like an Entry widget;
            hack is: relief set to 'SUNKEN'
        hl or highlightable: whether to change relief to 'solid' if mouse is hovering on this widget.
        place, grid, pack: dict or bool,
            dict containing parameters to tkinter's widget.[place, pack, grid];
                OR
            bool: in the case of pack and grid to use the GEOMETRY's manager discretion.
        font: sets the font for this widget.
        config: parameters to pass to the tkinter widget constructor unchanged.
        kwargs: other options maybe to tkinter widgets or there direct subclasses.
        '''

    def entered(self, event=None):
        'mouse is entered widget'

    def left(self, event=None):
        'mouse is left widget'

    def get(self): ...
    def clear(self): ...
    empty = clear

    def statusShow(self):
        'shows the text of this widget aon the status bar if present in the window.'

    @property
    def width(self): ... 

    @property
    def height(self): ... 

    @property
    def size(self, wid):
        'returns the width and height of this widget'

    @property
    def winfos(self):
        'the defaults winfo methods to get useful infos on this widget'

    @property
    def tupled_winfo_geometry(self):
        'returns tupled geometry values, from the tkinter interpreter.'

    def getText(self):
        'returns widget current text.'

    @property
    def status(self):
        'returns widget current status text.'

    def set(self, values):
        'sets the values, text parameter for widgets not having values.'

    def light(self):
        'changes fg to bg and vice-versa.'

    def unlight(self):
        'reset to default colors.'

    def addWidget(self, widget, config={}, place={}, grid={}, pack={}, container=None): ...
    def positionWidget(self, widget=None, **positions): ...
    def switchOne(self, event=None): ...
    
    @property
    def checkVar(self): ...
    def checked(self, event=None): ...
    def switchGroup(self, event=None): ...
    def toggleSwitch(self): ...
    def addToggleGroup(self, group): ...
    def setRadioGroups(self, group): ...
    def useFont(self, font=None): ...
    def bindOverrelief(self, wid, relief='solid', **kwargs): ...
    def bindEntryHighlight(self, **kwargs): ...
    def readonly(self, wh=''): ...
    def disabled(self): ...
    def active(self): ...
    def normal(self): ...
    def state(self, args=''): ...
    def config(self, tipKwargs={}, **kwargs): ...
    
    @property
    def PRMP_WIDGET(self): ...

    def addTip(self, **kwargs): ...
    def set_tooltip_text(self, tipKwargs): ...
    def on_mousewheel(self, event): ...
    def on_shiftmouse(self, event): ...
    def bound_to_mousewheel(self, event): ...
    def unbound_to_mousewheel(self, event): ...
    def _move(self, event): ...
    def _moveroot(self): ...
    def _grab_anywhere_on(self): ...
    def _grab_anywhere_off(self): ...
    def _onMotion(self, event): ...
    def bindToWidget(self, *args): ...
     
PWd = PRMP_Widget

class PRMP_Input:

    def __init__(self, placeholder='', _type='text', values=[], required=False, default=None, state='normal', very=False, fg_as_very=False, **kwargs): ...
    def changePlaceholder(self, placeholder): ...
    def verify(self): ...
    def normVery(self, event=None): ...
    def setNumber(self, number=None): ...
    def getNumber(self): ...
    def setMoney(self, money=None): ...
    def getMoney(self): ...
    def entered(self, event=None): ...
    def left(self, event=None): ...
    def green(self): ...
    def red(self): ...
    def checkingPath(self, event=None): ...
    def checkingDir(self, event=None): ...
    def checkingFile(self, event=None): ...
    def checkingEmail(self, event=None): ...
    def checkingNumber(self, event=None): ...
    def checkingMoney(self, event=None): ...
    def normal(self, force=0): ...    
    def readonly(self): ...
    def disabled(self): ...
    def paint(self): ...
    def _set(self, values): ...
    def set(self, values): ...    
    def correctState(self, state=None): ...
    @property
    def current_state(self):  ...    
    def setRange(self, from_=0, to=1, increment=.1): ...
    def _clear_placeholder(self, event=None): ...
    def _add_placeholder(self, event=None): ...
    def empty(self): ...
    def clear(self): ...
    def _get(self): ...
    def get(self): ...
    def state(self, args=''): ...
PI = PRMP_Input

class PRMP_InputButtons:

    def set(self, value): ...
    def get(self): ...    
    def clear(self): ...
    empty = clear

PIB = PRMP_InputButtons

class PRMP_FillWidgets(PRMP_Mixins):

    def __init__(self, values={}): ...
    def addResultsWidgets(self, child): ...
    def addNotEditables(self, child): ...
    def emptyWidgets(self, widgets=[]): ...
    @property
    def notEditables(self): ...
    @property
    def resultsWidgets(self): ...

    def set(self, values={}, widgets=[]): ...
    def get(self, widgets=[]): ...
FW = PRMP_FillWidgets





picTypes = ['Pictures {.jpg .png .jpeg .gif .xbm}']


class PRMP_(PRMP_Widget):
    '''
    Base class for all widgets based on tkinter.__init__ widgets
    '''

    def __init__(self, master=None, **kwargs): ...
P_ = PRMP_

#   from tk widgets --> PRMP_

class PRMP_Button(PRMP_, tk.Button):
    TkClass = tk.Button

    def __init__(self, master, font='DEFAULT_BUTTON_FONT', **kwargs): ...
    @property
    def PRMP_WIDGET(self): ...
Button = PB = PRMP_Button

class PRMP_Checkbutton(PRMP_InputButtons, PRMP_, tk.Checkbutton):
    TkClass = tk.Checkbutton

    def __init__(self, master, asLabel=False, **kwargs): ...

    @property
    def PRMP_WIDGET(self): ...

    def disabled(self): ...
Checkbutton = PC = PRMP_Checkbutton

class PRMP_Entry(PRMP_Input, PRMP_, tk.Entry):
    TkClass = tk.Entry

    def __init__(self, master, **kwargs): ...

    @property
    def PRMP_WIDGET(self): ...
Entry = PE = PRMP_Entry

class PRMP_Frame(PRMP_, tk.Frame):
    TkClass = tk.Frame

    def __init__(self, master, bd=2, relief='flat', highlightable=False, **kwargs): ...
    @property
    def PRMP_WIDGET(self): ...
Frame = PF = PRMP_Frame

class PRMP_Label(PRMP_, tk.Label):
    TkClass = tk.Label

    def __init__(self, master, font='DEFAULT_LABEL_FONT', **kwargs): ...
    @property
    def PRMP_WIDGET(self): ...
Label = PL = PRMP_Label

class PRMP_LabelFrame(PRMP_, tk.LabelFrame):
    TkClass = tk.LabelFrame

    def __init__(self, master, font='DEFAULT_LABELFRAME_FONT', **kwargs): ...
    @property
    def PRMP_WIDGET(self): ...
LabelFrame = PLF = PRMP_LabelFrame

class PRMP_Menu(PRMP_, tk.Menu):
    TkClass = tk.Menu

    def __init__(self, master, **kwargs): ...

class PRMP_OptionMenu(PRMP_, tk.OptionMenu):
    TkClass = tk.OptionMenu

    def __init__(self, master, **kwargs): ...

class PRMP_PanedWindow(PRMP_, tk.PanedWindow):
    TkClass = tk.PanedWindow

    def __init__(self, master, **kwargs): ...

class PRMP_Radiobutton(PRMP_InputButtons, PRMP_, tk.Radiobutton):
    TkClass = tk.Radiobutton

    def __init__(self, master, **kwargs): ...
    @property
    def PRMP_WIDGET(self): ...
Radiobutton = PR = PRMP_Radiobutton

class PRMP_Scale(PRMP_, tk.Scale):
    TkClass = tk.Scale

    def __init__(self, master, **kwargs): ...

class PRMP_Scrollbar(PRMP_, tk.Scrollbar):
    TkClass = tk.Scrollbar

    def __init__(self, master, **kwargs): ...
    def set(self, first, last): ...
Scrollbar = PSc = PRMP_Scrollbar

class PRMP_Spinbox(PRMP_Input, PRMP_, tk.Spinbox):
    TkClass = tk.Spinbox

    def __init__(self, master, **kwargs): ...

    def get(self): ...
Spinbox = PSp = PRMP_Spinbox


# based on tk only

class PRMP_Canvas(PRMP_, tk.Canvas):
    TkClass = tk.Canvas

    def __init__(self, master, **kwargs): ...

class PRMP_Message(PRMP_, PRMP_Input, tk.Message):
    TkClass = tk.Message

    def __init__(self, master, **kwargs): ...
Message = PM = PRMP_Message

class PRMP_Text(PRMP_Input, PRMP_, tk.Text):
    TkClass = tk.Text

    def __init__(self, master, **kwargs): ...

    def _get(self): ...

    def set(self, values): ...

    def clear(self): ...

    @property
    def PRMP_WIDGET(self): ...
Text = PTx = PRMP_Text

class PRMP_Listbox(PRMP_, tk.Listbox):
    selectmodes = ['single', 'browse', 'multiple', 'extended']
    TkClass = tk.Listbox

    def __init__(self, master, values=[], callback=None, defBinds=1, bindings=[], **kwargs):
        '''
        values: values to fill with.
        callback: a function to execute if one item is picked
            format of the callback should be callback(exvent, selected).
        defBinds: bool whether to activate the default binding (calling the callback by default).
        bindings: container of containers of bindings in the format;
            bindings = [(event, callback, '-' or '+')]
        '''


    def bindings(self, binds):
        '''
        binds: container of containers of bindings in the format;
            bindings = [(event, callback, '-' or '+')]
        '''

    def clear(self): ...

    def insert(self, value, position='end'): ...
    def set(self, values, showAttr=''): ...
    def clicked(self, event=None): ...
    @property
    def selected(self):
        '''
        returns the currently selected items on the Listbox.
        '''
Listbox = PLb = PRMP_Listbox







class PRMP_Style_(PRMP_Widget):
    '''
    Base class for all widgets based on tkinter.ttk widgets
    '''

    def __init__(self, master, highlightable=False, **kwargs):
        super().__init__(master, _ttk_=True, highlightable=highlightable, **kwargs)

    @property
    def style(self): ...
PS_ = PRMP_Style_

#   from ttk widgets --> PRMP_Style_

class PRMP_Style(ttk.Style, PRMP_Mixins):
    LOADED = ...
    PRMP_Window = ...
    PRMP_STYLE_EVENT = ...

    ttkthemes = ...
    ttkstyles = ...

    def __init__(self, master): ...

    def tupledFont(self, fontDict):
        '''
        fontDict: a dict containing dict parameters
            {'family': 'Segoe Marker', 'size': 12, 'weight': 'normal', 'slant': 'roman', 'underline': 0, 'overstrike': 0}
        returns something like;
            ('-family', 'Segoe Marker', '-size', '12', '-weight', 'normal', '-slant', 'roman', '-underline', '0', '-overstrike', '0')
        '''
        ...

    def getImageKeys(self, name): ...

    def getThemePicsPath(self, theme): ...

    def _styleImages(self, name): ...

    def createPrmp(self): ...

    @property
    def settings(self): ...

    def update(self, event=None): ...
Style = PSt = PRMP_Style

class PRMP_Style_Button(PRMP_Style_, ttk.Button):
    TkClass = ttk.Button

    def __init__(self, master, font='DEFAULT_BUTTON_FONT', **kwargs): ...
SButton = PSB = PRMP_Style_Button

class PRMP_Style_Checkbutton(PRMP_InputButtons, PRMP_Style_, ttk.Checkbutton):
    TkClass = ttk.Checkbutton

    def __init__(self, master, **kwargs): ...

SCheckbutton = PSC = PRMP_Style_Checkbutton

class PRMP_Style_Entry(PRMP_Input, PRMP_Style_, ttk.Entry):
    TkClass = ttk.Entry

    def __init__(self, master, **kwargs): ...
SEntry = PSE = PRMP_Style_Entry

class PRMP_Style_Frame(PRMP_Style_, ttk.Frame):
    TkClass = ttk.Frame

    def __init__(self, master, **kwargs): ...
SFrame = PSF = PRMP_Style_Frame

class PRMP_Style_Label(PRMP_Style_, ttk.Label):
    TkClass = ttk.Label

    def __init__(self, master, font='DEFAULT_LABEL_FONT', **kwargs): ...
SLabel = PSL = PRMP_Style_Label

class PRMP_Style_LabelFrame(PRMP_Style_, ttk.LabelFrame):
    TkClass = ttk.LabelFrame

    def __init__(self, master, **kwargs): ...
SLabelFrame = PSLF = PRMP_Style_LabelFrame

class PRMP_Menubutton(PRMP_Style_, ttk.Menubutton):
    TkClass = ttk.Menubutton

    def __init__(self, master, **kwargs): ...
Menubutton = PM = PRMP_Menubutton

class PRMP_Style_OptionMenu(PRMP_Style_, ttk.OptionMenu):
    TkClass = ttk.OptionMenu

    def __init__(self, master, **kwargs): ...
SOptionMenu = PSO = PRMP_Style_OptionMenu

class PRMP_Style_PanedWindow(PRMP_Style_, ttk.PanedWindow):
    TkClass = ttk.PanedWindow

    def __init__(self, master, **kwargs): ...
SPanedWindow = PSP = PRMP_Style_PanedWindow

class PRMP_Style_Radiobutton(PRMP_InputButtons, PRMP_Style_, ttk.Radiobutton):
    TkClass = ttk.Radiobutton

    def __init__(self, master, **kwargs): ...
SRadiobutton = PSR = PRMP_Style_Radiobutton

class PRMP_Style_Scale(PRMP_Style_, ttk.Scale):
    TkClass = ttk.Scale

    def __init__(self, master, **kwargs): ...
SScale = PSS = PRMP_Style_Scale

class PRMP_Style_Scrollbar(PRMP_Style_, ttk.Scrollbar):
    TkClass = ttk.Scrollbar

    def __init__(self, master, **kwargs): ...

    def set(self, first, last): ...
SScrollbar = PSSc = PRMP_Style_Scrollbar

class PRMP_Style_Spinbox(PRMP_Input, PRMP_Style_, ttk.Spinbox):
    TkClass = ttk.Spinbox

    def __init__(self, master, **kwargs): ...


SSpinbox = PSSp = PRMP_Style_Spinbox

# based on ttk only

class PRMP_Combobox(PRMP_Input, PRMP_Style_, ttk.Combobox):
    TkClass = ttk.Combobox

    def __init__(self, master, _type='', values=[], **kwargs): ...

    def setObjs(self, objs, attr): ...
    def setObj(self, obj, attr): ...
    def setObjToView(self, obj): ...
    def getObj(self): ...
    # @property
    # def PRMP_WIDGET(self): ...
    def getValues(self): ...
Combobox = PCb = PRMP_Combobox

class PRMP_LabeledScale(PRMP_Style_, ttk.LabeledScale):
    TkClass = ttk.LabeledScale

    def __init__(self, master, **kwargs): ...
LabeledScale = PLS = PRMP_LabeledScale

class PRMP_Notebook(PRMP_Style_, ttk.Notebook):
    TkClass = ttk.Notebook

    def __init__(self, master, closable=0, **kwargs):
        '''
        closable: to check if the tabs of this Notebook can be closed.
        '''

    def _button_press(self, event):
        '''
        hack to simulate an active close button on each tab
        '''

    def _button_release(self, event):
        '''
        hack to simulate an active close button on each tab
        '''
    def _mouse_over(self, event):
        '''
        hack to simulate an active close button on each tab
        '''

Notebook = PN = PRMP_Notebook

class PRMP_Progressbar(PRMP_Style_, ttk.Progressbar):
    TkClass = ttk.Progressbar

    def __init__(self, master, **kwargs): ...
Progressbar = PPb = PRMP_Progressbar

class PRMP_Separator(PRMP_Style_, ttk.Separator):
    TkClass = ttk.Separator

    def __init__(self, master, **kwargs): ...
Separator = PS = PRMP_Separator

class PRMP_Sizegrip(PRMP_Style_, ttk.Sizegrip):
    TkClass = ttk.Sizegrip

    def __init__(self, master, **kwargs): ...
Sizegrip = PSg = PRMP_Sizegrip

class PRMP_Treeview(PRMP_Style_, ttk.Treeview):
    TkClass = ttk.Treeview

    def __init__(self, master, callback=None, tipping={}, **kwargs):
        '''
        tipping: kwargs for the tips on the items of the tree.
        callback: function to be called when an item is selected.
        ''' 

    def createTipsManager(self): ...
    def addItemTip(self, item, tip): ...
    def getChildren(self, item=None): ...
    def insert(self, item, position='end', value=None, text='', tip='', **kwargs): ...
    def delete(self, *items): ...
    def selected(self, event=None): ...
    def deleteAll(self): ...
    clear = deleteAll

Treeview = PTv = PRMP_Treeview



class PRMP_TkReloader:
    '''reload ability of a tk app.
    subclass this class and bind PRMP_TkReloader.reload() to an event, or manually call it.
    '''

    def runner(self):
        '''
        the brain.
        exits the first process, call another process with the environments variables of the current one.
        and sets the PRMP_TK environ variable
        '''
    def reloader(self, e=None):
        '''
        e: event
        '''
        
    def reload(self, func):
        '''
        This is the entry point
        func: function to execute if reloaded

        if PRMP_TK environment variable is not set, it call PRMP_TKReloader.runner
        '''


class PRMP_Window(PRMP_Widget, PRMP_TkReloader):
    TOPEST = ...
    STYLE = ...

    TKICON = ...
    PRMPICON = ...

    TIPSMANAGER = ...

    TkClass = ...

    @property
    def style(self): ...

    def prevTheme(self, event=None): ...

    def nextTheme(self, event=None): ...

    @property
    def topest(self): ...
    
    @property
    def toplevel(self): ...

    def start(self):
        '''
        paints this window and starts it
        '''
    
    @property
    def cont(self): ...
    
    def change2Imgcolor(self, image, num_colors=10, update=1, button_fg='white', fg='white'):
        '''
        changes the PRMP_Theme defaults colors to the colors in image

        image: path to image or an PIL.Image instance
        num_colors: number of colors to extract from the image
        update: bool, whether to trigger the painting of the widgets
        button_fg: color to set as the foreground of button widgets.
        '''

    change_color = change2Imgcolor

    def __init__(self, master=None, container=True, containerConfig={'relief': 'groove'},  gaw=None, ntb=None, tm=None, tw=None, grabAnyWhere=True, geo=(500, 500), geometry=(), noTitleBar=True, topMost=False, alpha=1, toolWindow=False, side='center', title='Window', bindExit=False, nrz=None, notResizable=False, atb=None, asb=None, be=None, resize=(1, 1), addStatusBar=True, addTitleBar=True, tkIcon='', prmpIcon='', grab=False, b4t=None, bind4Theme=1, toggleMenuBar=False, tbm=None, normTk=False, normStyle=False, tipping=False, tt=None, tooltype=False, noWindowButtons=False, nwb=None, themeIndex=0, theme='', canvas_as_container=False, cac=None, label_as_container=False, lac=None, containerClass=None, cc=None, promptExit=False, pe=None, sizegrip=True, **kwargs):
        '''
        PRMP_Window a base class for all window class for common behaviours.

        Resizability is only effective if and only if (tooltype = noTitleBar = toolWindow = False) and resize = (True, True)


        container: 
        containerConfig: 
        alpha: 
        side: 
        title: 

        resize: 
        normTk: 
        normStyle: 
        tipping: 
        themeIndex: 
        theme: 

        tkIcon: 
        prmpIcon: 
        grab: 
        
        pe, promptExit: 
        b4t, bind4Theme: 
        tbm, toggleMenuBar: 
        tw, toolWindow: 
        geo, geometry: 
        ntb, noTitleBar: 
        tm, topMost: 
        gaw, grabAnyWhere: 
        be, bindExit: 
        nrz, notResizable: 
        atb, addTitleBar: 
        asb, addStatusBar: 
        tt, tooltype: 
        nwb, noWindowButtons: 
        cac, canvas_as_container: 
        lac, label_as_container: 
        cc, containerClass: 

        kwargs: other TKClass options to pass to the PRMP_Widget.__init__
        '''
    def loadAfters(self): ...

    def addAfter(self, child):
        '''
        child: a callable to execute after mapping of this window
        '''

    def windowAttributes(self, topMost=0, toolWindow=0, alpha=1, noTitleBar=1,  addTitleBar=1, addStatusBar=1, tkIcon='', prmpIcon='', resize=(1, 1), tooltype=False):
        '''
        parameters are explained in the constructor.
        '''

    def setAttributes(self): ...

    def topmost(self): ...

    def addWindowToTaskBar(self, event=None):
        '''
        A hack for adding this window to OS managed windows
        called if and only if (noTitleBar is True and tooltype is False)
        '''

    def placeOnScreen(self, side='center', geometry=(500, 500)): ...

    @property
    def screenwidth(self): ...

    @property
    def screenheight(self): ...

    @property
    def screen_xy(self): ...

    @property
    def paddedScreen_xy(self): ...

    @property
    def geo(self): ...

    @property
    def containerGeo(self): ...

    @property
    def x_w(self): ...

    @property
    def y_h(self): ...

    def getWhichSide(self): ...

    @property
    def getXY(self):
        ...

    def _pointsToCenterOfScreen(self, x, y, *a):
        ...

    @property
    def pointsToCenterOfScreen(self): ...

    def getSubbedGeo(self, geo):
        ...

    def setGeometry(self, points): ...
    setSize = position = setGeometry

    def centerOfTopOfScreen(self): ...

    def changeGeometry(self, geo=(400, 300)): ...

    def centerOfScreen(self): ...

    def centerOfBottomOfScreen(self): ...

    def centerOfLeftOfScreen(self): ...

    def centerOfRightOfScreen(self): ...

    def topLeftOfScreen(self): ...

    def topRightOfScreen(self): ...
    def bottomLeftOfScreen(self): ...
    def bottomRightOfScreen(self): ...
    def topOfScreen(self): ...
    def bottomOfScreen(self): ...
    def rightOfScreen(self): ...
    def leftOfScreen(self): ...
    def placeContainer(self, event=None, h=0): ...

    def _isDialog(self, g=1): ...
    def minimize(self, event=None): ...
    def deiconed(self, event=None): ...
    def maximize(self, event=None): ...
    # events
    def isMaximized(self): ...
    def isMinimized(self): ...
    def isNormal(self): ...
    def setTitle(self, title): ...
    def setTkIcon(self, icon, **kwargs): ...
    def setPRMPIcon(self, icon, new=1, **kwargs): ...
    def addTitleBar(self, title=''): ...
    def switchMenu(self, e=None): ...
    def addToMenu(self, widget, **kwargs): ...
    def placeTitlebar(self): ...
    def editStatus(self, text): ...
    def addStatusBar(self): ...
    def placeStatusBar(self, event=None): ...
    def closing(self): ...
    def save(self): ...
    def destroy(self): ...
    def destroySelf(self, event=None): ...

    def _colorize(self): ...
    def paint(self, event=None): ...
    def afterPaint(self): ...
    def bindExit(self): ...
PWin = PRMP_Window

class PRMP_Tk(PRMP_Window, tk.Tk):
    TkClass = ...
    def __init__(self, _ttk_=False, **kwargs): ...

Tk = PT = PRMP_Tk

class PRMP_Toplevel(PRMP_Window, tk.Toplevel):
    TkClass = ...
    def __init__(self, master=None, _ttk_=False, **kwargs): ...

Toplevel = PTl = PRMP_Toplevel


class PRMP_MainWindow(PRMP_ClassMixins):

    def __init__(self, master=None, _ttk_=False, **kwargs): ...
    def __str__(self): ...
    def __getitem__(self, name): ...
    def __getattr__(self, name): ... 
MainWindow = PMW = PRMP_MainWindow

# ToolTips

class PRMP_ToolTip(Toplevel):
    'Create a tooltip'
    _initialized = False

    def __setitem__(self, key, value): self.configure(**{key: value})

    def __getitem__(self, key): ...

    def cget(self, key): ...

    def __init__(self, master, alpha=.8, bg='', background='', fg='', font="-family {Segoe UI} -size 9", foreground='', pos=None, position=(), relief='flat', text='', _ttk_=0, **kwargs):
        '''
        Construct a Tooltip with parent master.
        alpha: float. Tooltip opacity between 0 and 1.
        bg, background: for the tip
        fg, foreground: for the tip
        pos, position: position to place the tip
        relief: for the tip
        _ttk_: whether to use tkinter.ttk Entry or not
        kwargs: ttk.Label options,
        '''

    def configure(self, **kwargs): ...

    config = configure

    def update_style(self):...

    def deiconify(self): ...

    def keys(self):
        ...

    def position(self, pos): ...

ToolTip = PRMP_ToolTip

class PRMP_ToolTipsManager:

    def __init__(self, widget=None, delay=200, text='', **kwargs):
        '''
        widget: tkinter widget
        delay: delay to pop-up tip
        text: the text on the tip
        kwargs: options for the tooltip window e.g bg, font etc
        '''

 # for a single widget
    def motion(self, event=None): ...
    def enter(self, event=None): ...
    def leave(self, event=None): ...
    def showtip(self, event=None): ...

    def create_tooltip(self): ...
    @property
    def cgetsub(self): ...

    def configure(self, **kwargs): ...
    config = configure

    def add_tooltip(self, item, follow=False, delay=300, **kwargs): ...
    def set_tooltip_text(self, item, follow=False, delay=100, **kwargs): ...
    def remove_tooltip(self, item): ...
    def remove_all(self): ...
    def _on_enter_widget(self, event): ...
    def _on_motion_tree(self, event): ...
    def _on_motion_widget(self, event): ...
    def _on_leave(self, event): ...
    def _on_leave_tooltip(self, event): ...
    def display_tooltip(self): ...
ToolTipsManager = PRMP_ToolTipsManager


class PRMP_SolidScreen(PRMP_MainWindow):
    def __init__(self, side='top-center', gaw=1, bd=12, geo=(),**kwargs): ...

SS = PRMP_SolidScreen



class PRMP_ImageWidget:
    WidgetClass = None
    count = 0

    def __init__(self, master, bindMenu=0,  loadDefault=0, imgDelay=150, face=False, imageKwargs={}, config={}, **kwargs): ...
    def disabled(self): ...
    def normal(self): ...
    def loadImage(self, prmpImage=None, event=None, **kwargs): ...
    def __renderGif(self, magic=''): ...
    def removeImage(self): ...
    def _removeImage(self, val): ...
    def set(self, imageFile=None, **kwargs): ...
    def changeImage(self, e=0): ...
    def bindMenu(self): ...
    def unBindMenu(self): ...
    def get(self): ...
    def delMenu(self, e=0): ...
    def camera(self, e=0): ...
    def saveImage(self): ...
    def showMenu(self, e=0): ...
IW = PRMP_ImageWidget

class PRMP_ImageLabel(PRMP_ImageWidget, PRMP_Label):
    WidgetClass = PRMP_Label
    def __init__(self, master, **kwargs): ...
IL = PRMP_ImageLabel

class PRMP_ImageSLabel(PRMP_ImageWidget, PRMP_Style_Label):
    WidgetClass = PRMP_Style_Label
    def __init__(self, master, **kwargs): ...

SIL = PRMP_ImageSLabel

class PRMP_ImageButton(PRMP_ImageWidget, PRMP_Button):
    WidgetClass = PRMP_Button
    def __init__(self, master, **kwargs): ...

IB = PRMP_ImageButton

class PRMP_ImageSButton(PRMP_ImageWidget, PRMP_Style_Button):
    WidgetClass = PRMP_Style_Button
    def __init__(self, master, **kwargs): ...

ISB = PRMP_ImageSButton


class PRMP_ImageCheckbutton(PRMP_ImageWidget, PRMP_Checkbutton):
    WidgetClass = PRMP_Checkbutton
    def __init__(self, master, **kwargs): ...

IB = PRMP_ImageCheckbutton

class PRMP_ImageSCheckbutton(PRMP_ImageWidget, PRMP_Style_Checkbutton):
    WidgetClass = PRMP_Style_Checkbutton
    def __init__(self, master, **kwargs): ...

ISB = PRMP_ImageSCheckbutton


class PRMP_Camera(PRMP_Style_Frame):

    def __init__(self, master, source=0, frameUpdateRate=10, callback=None, face=False, **kwargs): ...
        
    def y(self): ...

    def placeSave(self): ...
    def screenPause(self, e=0): ...
    def saveImage(self): ...
    @staticmethod
    def _saveImage(image): ...
    def get(self): ...
    def onConfig(self, event=None): ...
    def openCam(self): ...
    def closeCam(self): ...
    def snapshot(self): ...
    def _updateScreen(self, image=None): ...
    def updateScreen(self): ...
    def checkVisibility(self, event): ...
    def setImage(self, image=None): ...
    def getFrame(self): ...
    def __del__(self): ...


class PRMP_DateWidget:
    attr = 'date'
    def __init__(self, min_=None, max_=None, callback=None):
        '''
        min_: minimum date.
        max_: maximum date.
        callback: function to call with the chossen date as the parameter to the function.
        '''

    def verify(self): ...
    def action(self): ...

    def get(self): ...

    def set(self, date):
        '''
        date: a str or instance of datetime.date
        '''

    def show(self): ...
class PRMP_DateButton(PRMP_DateWidget, PRMP_Button):
    def __init__(self, master=None, font=PRMP_Theme.DEFAULT_FONT, asEntry=True, placeholder='', min_=None, max_=None, callback=None, anchor='w', **kwargs): ...

PDB = PRMP_DateButton

class PRMP_MonthButton(PRMP_DateButton): attr = 'monthName'
PMoB = PRMP_MonthButton

class PRMP_MonthYearButton(PRMP_DateButton): attr = 'monthYear'


class PRMP_DateTimeView(LabelFrame):
    'A widget that shows the time and date in some sub-widgets.'

    def __init__(self, master, text='Date and Time', **kwargs): ...
    def update(self): ...

class PRMP_Calendar(Frame):

    choosen = None
    _version_ = '3.4.0' # Alpha by PRMPSmart

    background = ...
    header_fg = ...
    header_bg = ...
    month_fg = ...
    month_bg = ...
    year_fg = ...
    year_bg = ...

    surf_fg = ...
    surf_bg = ...


    class DayLabel(PRMP_Label):
        'buttons on the main calendar frame'
        highlight_bg = ...
        highlight_fg = ...
        now_fg = ...
        now_bg = ...
        now_highlight_fg = ...
        now_highlight_bg = ...
        empty_bg = ...
        choosen_fg = ...
        choosen_bg = ...
        days_fg = ...
        days_bg = ...
        notPart = ...
        count = ...

        def __init__(self, master=None, returnMethod=None, **kw): ...
        def onButton(self, e=0): ...
        @property
        def status(self): ...
        def offButton(self, e=0): ...
        paint = offButton

        def config(self, day=None, command=None, **kwargs): ...
        @property
        def now(self): ...
        def changeDay(self, day): ...
        def empty(self): ...
        def clicked(self, e=0): ...
        def choosen(self, e=0): ...
    
    def __init__(self, master, month=None, callback=None, min_=None, max_=None, **kwargs):
        '''
        month: datetime.date instance to use as the opening month.
        calllback: function to call with the choosen date as a parameter.
        min_: minimum datetime.date instance viewable
        max_: maximum datetime.date instance viewable
        '''

    def afterPaint(self): ...
    def resetDate(self, e=0): ...
    def nextYear(self): ...
    def nextMonth(self, e=0): ...
    def previousYear(self): ...
    def previousMonth(self): ...
    def updateDays(self): ...
    @property
    def date(self): ...

    def choosenDay(self, date): ...


class AutoScroll:
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master): ...
    @staticmethod
    def _autoscroll(sbar): ...
    def __str__(self): ...
AS = AutoScroll


class PRMP_ListBox(PRMP_Frame):

    def __getattr__(self, attr): ...
    def __init__(self, master, listboxConfig={}, callback=None, **kwargs): ...
    @property
    def selected(self): ...

ListBox = PLB = PRMP_ListBox

class PRMP_TreeView(PRMP_Frame):
    __shows = ['tree', 'headings']
    __slots__ = ['tree']

    def __init__(self, master=None, columns=[], treeviewKwargs={}, **kwargs): ...
    def bindings(self): ...
    def create(self): ...
    def tag_config(self, tagName, font=PRMP_Theme.DEFAULT_FONT, **kwargs): ...
    def treeviewConfig(self, **kwargs): ...
    tvc = Config = treeviewConfig

    def setColumns(self, columns=[]): ...
    def updateHeading(self): ...
    def _set(self, obj=None, parent='', subs='subs', op=1): ...
    def set(self, obj, op=1): ...
    def reload(self): self.set(self.obj)

TreeView = PTV = PRMP_TreeView

class PRMP_ScrollText(PRMP_Frame):

    def __init__(self, master=None, columns=[], **kwargs): ...

ScrollText = PSTx = PRMP_ScrollText

# under testing
class ScrollableFrame(PRMP_Frame):

    def __init__(self, master, **kwargs): ...
    def changeFrameBox(self, e=0): ...
SF = ScrollableFrame


class ScrolledText(AutoScroll, tk.Text):

    @create_container
    def __init__(self, master, **kw): ...

class ScrolledEntry(AutoScroll, tk.Entry):

    @create_container
    def __init__(self, master, **kw): ...


class Hierachy(PRMP_TreeView):

    def __init__(self, master=None, columns=[], toggleOpen=True, binds=[], openDialog=None, image_get=None, **kwargs):

        self._toggleOpen = False
        self.toop = toggleOpen
        self.images = []
        self.last = []
        self.binds = binds

        self.image_get = image_get or self.get_image
        super().__init__(master=master, columns=columns, **kwargs)

        self._openDialog = openDialog

    @property
    def openDialog(self): ...
    def toggleOpen(self, e=0): ...
    def bindings(self): ...
    def reload(self, e=0): ...
    def viewSelected(self, e=0): ...
    def getSubs(self, obj, item=''): ...
    def _viewObjs(self, obj, parent=''): ...
    def get_image(self, obj): ...
    def _printList(self, subs, item): ...
    def viewObjs(self, obj, parent=''): ...
    def viewSubs(self, obj): ...

class Table(Frame):
    
    def toNum(self, value): ...
    def __init__(self, master, title='', treeKwargs={}, reserve=0, output=float, converter=None, offset=3, treeWidget=(), titleH=40, addTotals=False, **kwargs):
        '''
        master: parent of this widget.
        title: title of this table.
        treeKwargs: parameters of the Treeview.
        reserve: number of columns to not process in each row.
        output: function to format the processed values.
        converter: function to process the raw values, default is Table.toNum.
        offset: number of empty rows to leave before writing the totals.
        treeWidget: A subclass of Treeview, or any widget to use as the holder of the contents of the table
        kwargs: parameters for Frame.__init__() 
        '''

    def resize(self, event=None): ...
    def setTitle(self, title): ...

    @property
    def columns(self): ...

    def getTotals(self, values): ...
    def updateTable(self, title, values): ...
    def viewObjs(self, values): ...
    def clear(self): ...


class PRMP_DropDownWidget(PRMP_AdvMixins):
    WidgetClass = None

    def __init__(self, master=None, ddwc=None, dropdown_windowclass=None, ddwk={}, dropdown_windowkwargs={}, attr='', valueType=str, validatecmd=None, callback=None, **kwargs):
        """
        Create an entry with a drop-down widget
        """
    
    def createDDW(self): ...
    def _determine_downarrow_name(self, event=None): ...
    def _on_b1_press(self, event=None): ...
    def _on_focus_out_dropdown_window(self, event): ...
    def set(self, value): ...
    def getValue(self, value): ...
    def destroy(self): ...
    def drop_down(self, event=None): ...
    def configure(self, cnf={}, **kw): ...
    def config(self, *args, **kwargs): ...        

    def get(self): ...
DDW = PRMP_DropDownWidget

class PRMP_DropDownEntry(PRMP_DropDownWidget, SEntry):

    entry_kw = ...
    WidgetClass = ...

    def __init__(self, master=None, **kwargs): ... 

    def _on_b1_press(self, event):
        """Trigger self.drop_down on downarrow button press and set widget state to ['pressed', 'active']."""

    def _on_motion(self, event):
        """Set widget state depending on mouse position to mimic Combobox behavior."""

    def state(self, args=''):
        """
        Modify or inquire widget state.

        Widget state is returned if statespec is None, otherwise it is
        set according to the statespec flags and then a new state spec
        is returned indicating which flags were changed. statespec is
        expected to be a sequence.
        """

    def configure(self, cnf={}, **kw): ...

DDE = DropDownEntry = PRMP_DropDownEntry

class PRMP_DropDownButton(PRMP_DropDownWidget, Button): WidgetClass = Button
DDB = DropDownButton = PRMP_DropDownButton

class PRMP_DropDownCheckbutton(PRMP_DropDownWidget, Checkbutton):
    WidgetClass = Checkbutton

    def getValue(self, val):
        val = super().getValue(val)
        self.configure(text=val)
        ...
DDCb = DropDownCheckbutton = PRMP_DropDownCheckbutton


class PRMP_DropDownCalendarWidget(PRMP_DropDownWidget):

    def __init__(self, *args, **kwargs):

        super().__init__(*args, ddwc=PRMP_CalendarDialog, ddwk=dict(gaw=0, geo=(300, 250)), **kwargs)


class PRMP_DropDownCalendarEntry(PRMP_DropDownEntry):

    def __init__(self, *args, **kwargs): ...
    @property
    def date(self): ...
    def now(self): ...
    def nextDay(self, event=None): ...
    def prevDay(self, event=None):  ...
    def nextWeek(self, event=None): ...
    def prevWeek(self, event=None):  ...
    def nextMonth(self, event=None):  ...
    def prevMonth(self, event=None):  ...
    def nextYear(self, event=None):  ...
    def prevYear(self, event=None):  ...





class PlotDatas:
    
    def __init__(self, xticks=[], ys=[], labels=[], xlabel='', ylabel=''): ...
    def float_it(self, num): ...
    def _x_axis(self): ...
    def _plot_points(self): ...
    def switch(self): ...
Bar = PlotDatas

class Plots(PRMP_ClassMixins):
    bkcol = 'white'
   
    def __init__(self, bkcol=''): ...
    def annotate(self, xlabel='', ylabel='', title='', xticks=0, yticks=0, set_xticks=0, set_yticks=0, axisrotate=(0, 0), lblrotate=(0, 90)): ...
    def genAnnot(self, xlabel='', ylabel='', title='', xticks=0, yticks=0, set_xticks=0, set_yticks=0, axisrotate=(0, 0), lblrotate=(0, 90)):  ...

    def doAnnotation(self): ...
    def doPlotting(self, chart='plot', grid=None, adjust={}, draw=True, autoAdjust=False, **kwargs): ...
    def adjust(self, left=.2, bottom=.5, right=.94, top=.88, wspace=.2, hspace=0):  ...

    def draw(self):  ...

    def legend(self): ...
    def set_grid(self, grid): ...
    def clear(self): ...
    def plot(self, xticks=[], ys=[], labels=[], markers=[], marker=False, lss=[], linestyle=[], lw=1, linewidth=1, alpha=0, switch=0): ...
    def bar(self, xticks=[], ys=[], labels=[], xlabel='', title='', switch='', ylabel='', axisrotate=(20, 0)): ...
    barh = bar

    def hist(self, *args):  ...

    def pie(self, ys=[], labels=[], explode=[], shadow=None, title=''): ...

class Render(Plots):
    def __init__(self, bkcol='white', annotation={}): ...
    def draw(self):  ...

    def pie(self,  **kwargs): ...

class PRMP_PlotCanvas(Plots, PRMP_Frame):
    charts = ...
    lss = ...
    grid_kws = ...

    def __init__(self, master=None, relief='solid', **kwargs): ...
    def ls_choser(self, num=1): ...
    def marker_chooser(self, num): ...
    def doPlotting(self, expand=False, inApp=1, adjust={}, **kwargs): ...
    def plot(self, xticks=[], labels=[], xlabel='', ylabel='', title='', lss=None, annot={}, axisrotate=(20, 0), ys=[], **kwargs): ...
    def bar(self, **kwargs): ...
    def pie(self, labels=[], explode=None, **kwargs): ...
    def set_grid(self, grid): ...
    def show(self, o=0): ...

class OptPlot(PRMP_Frame):
    
    def __init__(self, master, **kwargs): ...
    def load(self, **kwargs): ...
    def plot(self, chart=''): ...


#  These widgets doesn't need or can't be used with PRMP_Widget.addWidget()

class TwoWidgets(PRMP_Frame):
    top_widgets = ...
    stop_widgets = ...
    bottom_widgets = ...
    sbottom_widgets = ...
    events = ...
    top_defaults = ...
    bottom_defaults = ...

    def __init__(self, master, top='', bottom='', orient='v', relief='groove', command=None, longent=.5, widthent=0, topKwargs=dict(), bottomKwargs=dict(), disableOnToggle=True, dot=None, tttk=False, bttk=False, func=None, **kwargs): ...
    def clicked(self, e=0): ...

    def light(self): ...
    def unlight(self): ...
    def verify(self): ...
    def toggleSwitch(self): ...
    def readonly(self): ...
    def disabled(self, wh=''): ...
    def clear(self): ...
    empty = clear

    def active(self, wh=''): ...
    def normal(self, wh=''): ...

    def set(self, *values):  ...

    def get(self): ...

    def changeValues(self, values): ...
    def config(self, **kwargs): ...
    def place_widgs(self): ...
TW = TwoWidgets

class RadioCombo(TwoWidgets):
    def __init__(self, master, **kwargs): ...
RC = RadioCombo

class RadioEntry(TwoWidgets):
    def __init__(self, master, **kwargs): ...
RE = RadioEntry

class LabelSpin(TwoWidgets):
    def __init__(self, master, **kwargs):

        ...
LS = LabelSpin

class LabelEntry(TwoWidgets):
    def __init__(self, master, **kwargs): ...
LE = LabelEntry

class LabelText(TwoWidgets):
    def __init__(self, master, **kwargs):
        ...
LT = LabelText

class LabelSText(TwoWidgets):
    def __init__(self, master, **kwargs):
        ...
LST = LabelSText

class LabelCombo(TwoWidgets):
    def __init__(self, master, **kwargs):

        ...

        self.choosen = None
LC = LabelCombo

class CheckEntry(TwoWidgets):
    def __init__(self, master, **kwargs): ...
CE = CheckEntry

class CheckCombo(TwoWidgets):
    def __init__(self, master, **kwargs):
        ...
CC = CheckCombo

class LabelButton(TwoWidgets):
    def __init__(self, master, **kwargs): ...
LB = LabelButton

class LabelLabel(TwoWidgets):
    def __init__(self, master, bottomKwargs={}, **kwargs):
        if not bottomKwargs.get('font'): bottomKwargs['font'] = 'DEFAULT_FONT'
        ...
LL = LabelLabel

class LabelDateButton(TwoWidgets):
    def __init__(self, master, **kwargs): ...
LDB = LabelDateButton

class LabelMonthButton(TwoWidgets):
    def __init__(self, master, **kwargs): ...
LMB = LabelMonthButton

class LabelMonthYearButton(TwoWidgets):
    def __init__(self, master, **kwargs): ...
LMYB = LabelMonthYearButton


class DateWidget(TwoWidgets):
    
    def __init__(self, master, bottomKwargs={}, **kwargs):
        ...
    
    def set(self, date):...




class PRMP_FramedCanvas(Frame):
    def __init__(self, master, canvasConfig={}, **kwargs): ...

class PRMP_Entry_Label(Label):
    def __init__(self, master, font='DEFAULT_FONT', **kwargs): ...
Entry_Label = PRMP_Entry_Label


class Tushed_Entry(Frame):
    imageLoaded = False
    res = (20, 20)
    dic = dict(inbuilt=1, resize=res, for_tk=1)

    def __init__(self, master, font={}, action=None, show='*', entryKwargs={}, reliefs='', positions=(1, 0, 0, 0, 0), _pass=None, **kwargs):
        '''
        a Login widget that features a show button and action button.
        positions: tuple of three floats relating the width of the (entry, pass, show, clear, action) summing up to one.
        '''
    def load(self, positions=(), again=False): ...
    def empty(self, event=None): ...
    
    def validating(self, event=None): ...
    def invokeAction(self, event=None): ...
    def __getattr__(self, name): ...
    def setAction(self, action=None, _pass=None): ...
    def getFromSelf(self, *args): ...


class ChoosePath(LabelText):
    def __init__(self, master, text='', callback=None, folder=0, bottomKwargs={}, customFont=0, **kwargs): ...
    def read_dir(self, event): ...
    def load_dir(self, event): ...
    
    def _set(self, path): ...

class AttrLabelButton(LabelButton):
    def __init__(self, master, **kwargs): ...
    def getAttr(self): ...
    def setAttr(self, attr): ...
    def get(self): ...



class AttributesViewer(LabelFrame):

    def __init__(self, master, attr='', obj=None, dialog=None, **kwargs): ...
    def openMaster(self): ...
    def open(self): ...


class AttributesExplorer(LabelFrame):
    def __init__(self, master, listboxConfig={}, callback=None, obj=None, values={}, dialog=None, **kwargs): ...
    def openAttribute(self): ...
    def addAtrribute(self, e=0): ...
    def deleteAttribute(self, e=0): ...
    def _delete(self, w): ...
    def setListBox(self): ...
    def clicked(self, event=None, selected=None): ...
    def set(self, values): ...
    def getAttributes(self): ...
    def setTreeview(self, values, parent=''): ...

class ColumnViewer(LabelFrame):

    def __init__(self, master, column=None, **kwargs): ...
    def openMaster(self): ...
    def open(self): ...

class ColumnsExplorer(PRMP_FillWidgets, LabelFrame):
    def __init__(self, master, listboxConfig={}, callback=None, columns=None, masterWid=None, **kwargs): ...
    def addColumn(self, e=0): ...
    def deleteColumn(self, e=0): ...
    def _delete(self, w): ...
    def setListBox(self): ...
    def clicked(self, event=None, selected=None):  ...
    def set(self, columns): ...
    def updateCol(self, listbox=[]): ...
    def getColumns(self, e=0): ...




def showDialog(title=None, msg=None, which=None): ...
def confirmDialog(title=None, msg=None, which=None): ...
def askDialog(string=0, number=0, f=0, title='', prompt='', **kwargs): ...
def askPath(opened=False, folder=False, many=False, save=False, **kwargs): ...



class PRMP_Dialog(PRMP_MainWindow, PRMP_FillWidgets, PRMP_ClassMixins):

    def __init__(self, master=None, _return=True, values={}, ntb=1, nrz=0, tm=1, gaw=1, tw=1, editable=True, callback=None, show=1, grab=0, bell=False, delay=0, tt=False, tooltype=False, wait=False, withdraw=False, **kwargs): ...

    def _setupDialog(self): ...
    def defaults(self): ...

    @property
    def result(self): ...

    def _setResult(self, result): ...

    def addSubmitButton(self): ...

    def bindCR(self): self....
    def unbindCR(self): ...

    def _placeSubmitButton(self): ...
    def placeSubmitBtn(self, wh=0): ...
    def addEditButton(self): ...
    def processInput(self, e=0): ...
    def action(self): ...
    def save(self):  ...
    def editInput(self, e=0): ...
    def destroyDialog(self): ...
PD = PRMP_Dialog

class PRMP_CalendarDialog(PRMP_Dialog):

    def __init__(self, master=None, month=None, title='PRMP_Calendar Dialog', geo=(300, 300), min_=None, max_=None, date=None, **kwargs): ...
    def _setupDialog(self): ...
    def afterPaint(self):  ...
    def getDate(self, date): ...
    def validate_cmd(self, date): ...

    def set(self, date=None): ...
CD = PRMP_CalendarDialog

class PRMP_MessageDialog(PRMP_Dialog):
    _bitmaps = ...
    def __init__(self, master=None, geo=(350, 170), title='Message Dialog', message='Put your message here.', _type='info', cancel=0, ask=0, yes=dict(text='Yes'), no=dict(text='No'), msgFont='DEFAULT_FONT', plenty=0, bell=0, msg='', delay=3000, images=(), **kwargs): ...
    def _setupDialog(self): ...
    def getType(self, _type): ...
    @property
    def _xbms(self):  ...

    def yesCom(self): ...
    def cancelCom(self): ...
    def noCom(self): ...
PMB = PRMP_MsgBox = PRMP_MessageDialog

class PRMP_CameraDialog(PRMP_Dialog):

    def __init__(self, master=None, title='PRMP_Camera Dialog', cameraKwargs={}, **kwargs): ...
    def isMaximized(self): ...
    def _setupDialog(self): ...
    def getImage(self, imageFile): ...
    # def

    def __del__(self): del self.camera
CamD = PRMP_CameraDialog

class PRMP_ImageDialog(PRMP_Dialog):

    def __init__(self, master=None, prmpImage=None, title='Image Dialog', imageKwargs={}, imageWidConfig={}, **kwargs): ...

    def _setupDialog(self): ...

    def getImage(self, imageFile): ...
ImgD = PRMP_ImageDialog



class Splash(PRMP_Dialog):
    def __init__(self, master=None, prmpImage='', ntb=1, atb=0, asb=0, geo=(800, 500), title='Goodness and Mercy', imageKwargs={}, delay=2000, **kwargs): ...
    def _setupDialog(self): ...
    def processCallback(self): ...
    def set(self): ...


def dialogFunc(*args, ask=0, path=0, obj=None, int_=0, float_=0, string=0, edit=False, font=None, **kwargs): ...

class AttributesExplorerDialog(PRMP_Dialog):

    def __init__(self, master=None, title='Attributes Explorer Dialog', geo=(600, 500), obj=None, dialog=None, **kwargs): ...

    def _setupDialog(self): ...

    def _callback(self, w): ...


class AttributesViewerDialog(PRMP_Dialog):

    def __init__(self, master=None, title='Attributes Viewer Dialog', geo=(700, 300), obj=None, attr=None, dialog=None, **kwargs): ...
    def _setupDialog(self): ...


class ColumnViewerDialog(PRMP_Dialog):

    def __init__(self, master=None, title='Columns Viewer Dialog', geo=(300, 300), column=None, manager=None, **kwargs): ...
    def _setupDialog(self): ...
    def processInput(self, e=0): ...
    def addColumn(self, w): ...
    def editColumn(self, w): ...

class ColumnsExplorerDialog(PRMP_Dialog):

    def __init__(self, master=None, title='Columns Explorer Dialog', geo=(800, 500), columns=None, **kwargs): ...
    def _setupDialog(self): ...
    def _callback(self, w, e=0): ...


