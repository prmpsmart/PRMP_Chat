__author__ = "PRMP Smart"

try: import re
except: ...
try: import os
except: ...
try: import io
except: ...
try: import datetime
except: ...
try: import calendar
except: ...
try: import base64
except: ...
try: import zlib
except: ...
try: import pickle
except: ...
try: import zipfile
except: ...
try: import sqlite3
except: ...
try: import tkinter as tk
except: ...
try: import numpy
except: ...
try:
    from PIL.ImageTk import Image, PhotoImage, BitmapImage
    from PIL import Image, ImageDraw, ImageSequence, ImageGrab
    _PIL_ = True
except Exception as e:
    _PIL_ = False
    # print('PIL <pillow> image library is not installed.')

try:
    import cv2
    _CV2_ = True
except Exception as e:
    _CV2_ = False
    # print('cv2 <opencv-python> computer vision library is not installed.')

# prmp_setup.py
try:
    from distutils.core import setup
    from Cython.Build import cythonize
    import PyInstaller.__main__
except: ...



black_lux = ...
ash_lux = ...
blue_lux = ...
gray_lux = ...
orange_lux = ...
purple_lux = ...
red_lux = ...
act_fold = ...
balarrow = ...
bold = ...
capital = ...
cbxarrow = ...
centerj = ...
ck_def = ...
ck_off = ...
ck_on = ...
combobox = ...
cross = ...
decr = ...
drivea = ...
drop = ...
file = ...
filebox = ...
flagdown = ...
flagup = ...
folder = ...
gray25 = ...
harddisk = ...
hourglas = ...
incr = ...
italic = ...
justify = ...
leftj = ...
letters = ...
maximize = ...
minimize = ...
minus = ...
minusarm = ...
netw = ...
network = ...
noletter = ...
openfile = ...
openfold = ...
pattern = ...
plus = ...
plusarm = ...
resize1 = ...
resize2 = ...
restore = ...
rightj = ...
srcfile = ...
system = ...
textfile = ...
tick = ...
underlin = ...
profile_pix = ...
gtk_about = ...
gtk_add = ...
gtk_apply = ...
gtk_bold = ...
gtk_cancel = ...
gtk_cdrom = ...
gtk_clear = ...
gtk_close = ...
gtk_convert = ...
gtk_copy = ...
gtk_cut = ...
gtk_delete = ...
gtk_edit = ...
gtk_execute = ...
gtk_file = ...
gtk_find = ...
gtk_find_and_replace = ...
gtk_floppy = ...
gtk_goto_bottom = ...
gtk_goto_first_ltr = ...
gtk_goto_last_ltr = ...
gtk_goto_top = ...
gtk_go_back_ltr = ...
gtk_go_down = ...
gtk_go_forward_ltr = ...
gtk_go_up = ...
gtk_harddisk = ...
gtk_help = ...
gtk_home = ...
gtk_indent_ltr = ...
gtk_index = ...
gtk_info = ...
gtk_italic = ...
gtk_jump_to_ltr = ...
gtk_justify_center = ...
gtk_justify_fill = ...
gtk_justify_left = ...
gtk_justify_right = ...
gtk_network = ...
gtk_new = ...
gtk_no = ...
gtk_ok = ...
gtk_open = ...
gtk_paste = ...
gtk_preferences = ...
gtk_print = ...
gtk_print_preview = ...
gtk_properties = ...
gtk_quit = ...
gtk_redo_ltr = ...
gtk_refresh = ...
gtk_remove = ...
gtk_revert_to_saved_ltr = ...
gtk_save = ...
gtk_save_as = ...
gtk_select_all = ...
gtk_select_color = ...
gtk_select_font = ...
gtk_sort_ascending = ...
gtk_sort_descending = ...
gtk_spell_check = ...
gtk_stop = ...
gtk_strikethrough = ...
gtk_undelete_ltr = ...
gtk_underline = ...
gtk_undo_ltr = ...
gtk_unindent_ltr = ...
gtk_yes = ...
gtk_zoom_100 = ...
gtk_zoom_fit = ...
gtk_zoom_in = ...
gtk_zoom_out = ...
open_ = ...
up = ...
up_pressed = ...
address_book = ...
adobe_illustrator_cs3_document = ...
adobe_pdf_document = ...
adobe_photoshop_cs3_document = ...
battery = ...
binoculars = ...
book = ...
briefcase = ...
button_add = ...
button_blank_blue = ...
button_blank_gray = ...
button_blank_green = ...
button_blank_red = ...
button_blank_yellow = ...
button_cancel = ...
button_close = ...
button_delete = ...
button_download = ...
button_favorite = ...
button_forward = ...
button_help = ...
button_info = ...
button_log_off = ...
button_next = ...
button_pause = ...
button_play = ...
button_previous = ...
button_refresh = ...
button_reload = ...
button_reminder = ...
button_rewind = ...
button_talk_balloon = ...
button_turn_off = ...
button_turn_on = ...
button_upload = ...
button_warning = ...
calculator = ...
calendar_blue = ...
calendar_green = ...
calendar_red = ...
clipboard = ...
clipboard_paste = ...
clock = ...
coin = ...
compressed_file_rar = ...
compressed_file_sit = ...
compressed_file_zip = ...
computer_monitor = ...
computer_network = ...
document = ...
document_attach = ...
document_blank = ...
document_chart = ...
document_copy = ...
document_flow_chart = ...
document_gant_chart = ...
document_help = ...
document_line_chart = ...
document_microsoft_excel = ...
document_microsoft_powerpoint = ...
document_microsoft_word = ...
document_organization_chart = ...
document_preview = ...
document_text = ...
edit_document = ...
email = ...
email_attachment = ...
email_delete = ...
email_download = ...
email_forward = ...
email_inbox = ...
email_reply = ...
file_audio = ...
file_audio_aiff = ...
file_audio_mp3 = ...
file_audio_wav = ...
file_audio_wma = ...
file_delete = ...
file_history = ...
file_new = ...
file_open = ...
file_video = ...
file_video_3gp = ...
file_video_avi = ...
file_video_mov = ...
file_video_mpeg = ...
file_video_wmv = ...
folder = ...
folder_add = ...
folder_compressed = ...
folder_delete = ...
folder_explorer = ...
folder_generic_blue = ...
folder_generic_green = ...
folder_generic_red = ...
folder_generic_silver = ...
folder_open = ...
folder_rar = ...
games = ...
gear = ...
highlighter_blue = ...
highlighter_green = ...
highlighter_yellow = ...
image_bmp = ...
image_gif = ...
image_jpeg = ...
image_png = ...
image_tiff = ...
lock_lock = ...
lock_unlock = ...
my_documents = ...
my_ebooks = ...
my_music = ...
my_pictures = ...
my_videos = ...
my_websites = ...
network_firewall = ...
network_mac = ...
network_pc = ...
network_refresh = ...
pen_blue = ...
pen_green = ...
pen_red = ...
save = ...
text_edit = ...
usb = ...
user_administrator_blue = ...
user_administrator_green = ...
user_administrator_red = ...
user_chat = ...
user_clients = ...
user_coat_blue = ...
user_coat_green = ...
user_coat_red = ...
user_executive_blue = ...
user_executive_green = ...
user_executive_red = ...
user_group = ...
user_preppy_blue = ...
user_preppy_green = ...
user_preppy_red = ...
web_html = ...
web_xml = ...
window = ...
windows = ...
windows_cascade = ...
window_refresh = ...
zoom = ...
zoom_in = ...
zoom_out = ...
bar_striped = ...
blue_blocks = ...
blue_circle = ...
blue_dots = ...
dots_pulse = ...
dots_wave = ...
gray_circle = ...
gray_dots = ...
gray_spokes = ...
light_blue_circle = ...
line_boxes = ...
line_bubbles = ...
red_circle = ...
red_dots_ring = ...
ring_black_dots = ...
ring_blue = ...
ring_gray_segments = ...
ring_lines = ...
squish = ...

PRMP_JPEGS = ...


PRMP_XBMS = ...


PRMP_PNGS = ...


PRMP_GIFS = ...


PRMP_IMAGES = ...


PRMP_IMAGES_LISTS = ...


AdbWinApi321 = ...

AdbWinApi32 = ...

PRMP_ADB32 = ...

class PRMP_Errors(Exception):
    class PRMP_DateTimeError(Exception): ...
    class PRMP_ZipError(Exception): ...
#  -*- coding: utf-8 -*-


class PRMP_Mixins:
    tempFile = ...
    _unget = ...
    
    Errors = PRMP_Errors
    containers = list, set, tuple

    def propertize(self, name):...
    @property
    def AlphabetsSwitch(self):...
    def printError(self, func, error, file=''): ...
    @classmethod
    def notImp(cls): ...

    def testPrint(self, *args):...
    def __bool__(self):...



class PRMP_ClassMixins(PRMP_Mixins):
    
    @property
    def mroStr(self):...

    @property
    def mro(self):...

    @property
    def class_(self):...

    def attrError(self, attr):...

    @property
    def className(self):...

    def getFromSelf(self, name, unget=None):...

    def __len__(self): ...
    
    def __getitem__(self, item): ...

class PRMP_AdvMixins(PRMP_ClassMixins):
    
    def isArray(self, array):...
    def getDate(self, date=None):...
    def getImageData(self, image):...

class PRMP_StrMixins(PRMP_ClassMixins):
    
    _top = ...
    _left = ...
    _right = ...
    _bottom = ...
    _center = ...
    _sides = ...


    _both = ...
    _next = ...
    _previous = ...
    _forward = ...
    _backward = ...

    dollar = ...
    euro = ...
    yen = ...
    _moneySign = ...

    if os.sys.version_info[0] == 3:
        upArrow = ...
        downArrow = ...
        x_btn1 = ...
        x_btn2 = ...

        max_ = ...
        min_ = ...

        naira = ...
        _moneySign = ...

    email_regex = ...

    def getNumsInStrAsList(self, string, lengths=[], dontRaise=False): ...
    def numWithCommas(self, num=None, func=float, s='.02f'): ...
    def numWithSign_Commas(self, num=None): ...
    def addSignToNum(self, num): ...
    numberToMoney = addSignToMoney = addSignToNum

    def stripSignFromNum(self, num): ...
    moneyToNumber = stripSignFromMoney = stripSignFromNum

    def checkEmail(self, email):...

    def checkFile(self, file):...
    def checkDir(self, dir_):...
    def checkPath(self, path):...

    def checkNumber(self, number): ...
    def checkMoney(self, money): ...
    def decimalPlace(self, num, place=1): ...
    def approximate(self, num, size=1): ...
    def stripZeros(self, num, app=1): ...

class PRMP_GuiMixins(PRMP_StrMixins):
    pass


class PRMP_TkMixins(PRMP_GuiMixins):

    def tkFormatedFileTypes(self, name, exts=[]): ...


# class PRMP_PathMixins:




__author__ = 'PRMPSmart@gmail.com'

class OldCompareByDate: ...

class CompareByDate:...

class CompareByWeek:...

class CompareByMonth:...

class CompareByYear:...

class PRMP_DateTime(datetime.datetime, PRMP_AdvMixins, PRMP_StrMixins):
    date_fmt = "%d/%m/%Y" # default date format, subclass PRMP_DateTime and set date_fmt to your own format
    
    daysAbbr, daysNames, monthsAbbrs, monthsNames = ..., ..., ..., ...
    Errors = PRMP_Errors.PRMP_DateTimeError

    timedelta = datetime.timedelta


    # the __add__ and __sub__ are implementaions are purely by PRMPSmart@gmail.com

    def __getitem__(self, item): ...
    def __add__(self, add_month): ...
    def __sub__(self, sub_month): ...
    def __str__(self): ...
    def get(self, name, default=''):  ...
    @property
    def date(self):  ...
    @property
    def strDate(self): ...
    @property
    def totalDays(self): ...
    @classmethod
    def getDayNum(cls, day): ...
    @classmethod
    def getDayName(cls, day, abbr=False): ...
    @classmethod
    def checkDateTime(cls, date, dontRaise=False): ...
    @classmethod
    def now(cls):  ...
    @classmethod
    def getMonthNum(cls, month): ...
    @classmethod
    def getMonthName(cls, month, abbr=False): ...
    @classmethod
    def createDateTime(cls, year=None, month=1, day=1, auto=False, obj=None, week=None, hour=0, minute=0, second=0, string=''): ...
    @property
    def dayNum(self): ...
    @property
    def dayName(self): ...
    @property
    def dayNameAbbr(self): ...
    @property
    def monthName(self): ...
    @property
    def monthNameAbbr(self): ...

    @property
    def monthYear(self): ...
    @property
    def weekMonthYear(self): ...
    @property
    def monthYearTuple(self): ...
    @property
    def weekMonthYearTuple(self): ...
    @property
    def dayMonthYear(self): ...

    @property
    def isoWeekDay(self):...
        
    @property
    def weekDay(self): ...

    @property
    def weekInYear(self): ...

    def isSameDate(self, date):
        ...

    def isSameDay(self, date): ...

    def isSameDayName(self, date): ...

    def isSameYear(self, date): ...

    def isSameMonth(self, date): ...

    def isSameWeek(self, date): ...

    def isSameMonthYear(self, date): ...

    def isSameWeekMonthYear(self, date): ...

    @classmethod
    def _monthWeekDays(cls, year=None, month=None, monday=False, dateObj=None):
        'getting the weeks in a month'

    def monthWeekDays(self, **kwargs): ...

    @classmethod
    def getMonthYearOfDateTimes(cls, dts): ...

    @classmethod
    def monthYearOfMonthWeekDays(cls, **kwargs): ...

    @property
    def weekDates(self):
        'returns all the days in a month in a list of weeks'

    @property
    def oneDateInWeeks(self):
        'returns a list of containing a day from each weeks in the month'

    @property
    def monthDates(self):
        'returns all the days that makes up the 4 or 5 weeks in a list'

    @property
    def monthOnlyDates(self):
        'returns all the days in a month in a list'

    @property
    def allSpecDaysDates(self):
        'returns a list of list each containing the days of the same name'

    @property
    def specDaysDates(self):
        'returns a list of each day from each list returned from allSpecDaysDates'

    @property
    def monthsInYear(self):
        'returns the months in the year of this current PRMP_DateTime object'


    @property
    def week(self):
        'returns the week number that this date is in its month'

    @property
    def weekName(self): ...

    @classmethod
    def get__Date(cls, status=0, form=1, day_=0): ...
    @classmethod
    def getDMYFromString(cls, date): ...

    def diffInMonth(self, date):
        'returns the different in the current month and the given month'

    @classmethod
    def is_leap(cls, year): ...

    @property
    def isLeap(self): ...

    @classmethod
    def days_before_year(cls, year): ...

    @property
    def daysBeforeYear(self): ...

    @classmethod
    def days_in_month(cls, year, month): ...

    @property
    def daysInMonth(self): ...

    @classmethod
    def days_before_month(cls, year, month): ...

    def daysBeforeMonth(self): ...

    @classmethod
    def ymd2ord(cls, year, month, day): ...

    @property
    def ymdToOrd(self): ...

    @classmethod
    def ord2ymd(cls, ord_): ...

    def addTimes(self, **kwargs): ...

    def addMonths(self, months): ...


def zipPath(resource, destination='', latest=False, quiet=0, excludes=[]): ...


class PRMP_File(io.BytesIO, PRMP_AdvMixins, PRMP_ClassMixins):
    count = 0

    def __init__(self, filename='', b64=b'', data=b'', obj=None):
        '''
        filename: str use oas the name of the object, if filename exist on storage, automatically reads the data on storage into object
        b64: base64.b64encode bytes
        data: raw data in bytes
        obj: any python object to be serialized into PRMP_File
        '''
        
    def __repr__(self): ...
    def __str__(self): ...
    def __len__(self):  ...
    @property
    def data(self):  ...
    def read(self, _read=0): ...

    @property
    def size(self): ...

    def get(self): ...

    @property
    def compressedData(self): ...
    
    @property
    def decompressedData(self): ...

    @property
    def cdata(self): ...

    @property
    def base64Data(self): ...

    def pickle(self, file=''): ...
    def unpickle(self, file=''): ...
    def save(self, file=''): ...
    def saveObj(self, obj): ...

    def loadObj(self): ...

    @property
    def ext(self): ...


class PRMP_Exts(PRMP_AdvMixins):
    
    @classmethod
    def getname(cls, name): ...
    @classmethod
    def getsplits(cls, file, name='', data=False):
        '''
        :param file: str path to a file to read.
        :param name: name of the already encoded data passed as :param file: 
        '''
    
    @classmethod
    def embed_files_into_py(cls, files, pyfile, vars_name, var_pre='', var_suf=''):
        '''
        :param files: list of path to files to embed
        :param pyfile: a str path to a python file to host the images.
        '''


class PRMP_ImageType:

    tests = ...

    def test_jpeg(data):
        """JPEG data in JFIF or Exif format"""

    def test_png(data): ...

    def test_gif(data):
        """GIF ('87 and '89 variants)"""

    def test_tiff(data):
        """TIFF (can be in Motorola or Intel byte order)"""

    def test_rgb(data):
        """SGI image library"""

    def test_pbm(data):
        """PBM (portable bitmap)"""

    def test_pgm(data):
        """PGM (portable graymap)"""

    def test_ppm(data):
        """PPM (portable pixmap)"""

    def test_rast(data):
        """Sun raster file"""

    def test_xbm(data):
        """X bitmap (X10 or X11)"""

    def test_bmp(data): ...

    def test_webp(data): ...

    def test_exr(data): ...

    @classmethod
    def get(cls, file=None, data=b'', b64=b'', image=None):...

    @classmethod
    def _get(cls, data):...


class PRMP_Images:
    @classmethod
    def grabscreen(cls, bbox=None): ...
    @classmethod
    def grabclipboard(cls): ...
    @classmethod
    def rgb2hex(cls, color):
        ''' To get the hex value of a color in rgb format

        :param color: a list containing the values of the rgb
        :type color: list
        '''
    
    @classmethod
    def get_colors_percent(cls, freq, colors):
        ''' To get the dict containing colors and their percentages.

        :param freq: a list containing the frequencies of each color in colors
        :type image: list

        :param colors: a list containing the colors
        :type colors: list
        '''

    @classmethod
    def get_most_common(cls, colors):
        ''' To get the color with the max percentage.

        :param colors: a dict containing the colors and their percentages of occurrence
        :type colors: dict
        '''

    @classmethod
    def get_colors(cls, image, numcolors=10, resize=150, inhex=0, most_common=0, percent=0):
        ''' To get the colors in an image.

        :param image: an image or a str or bytes to an image file
        :type image: [str, bytes, Image]

        :param numcolors: number of colors to return
        :type numcolors: int

        :param resize: an int to resize the image to speed up the process
        :type resize: int
        
        :param inhex: bool whether to return the colors in hex
        :type inhex: bool
        
        :param most_common: bool whether to return only the most common color
        :type most_common: bool
        
        :param percent: bool whether to return colors with the frequency (percentages)
        :type percent: bool
        '''
    
    @classmethod
    def save_palette(colors, swatchsize=20, outfile="palette.png" ):
        ''' To write the dict or list colors into an image.
        :param colors: list of colors or dict of colors with the colors as the keys.
        :type colors: list, tuple, dict

        :param swatchsize: the size of each rectangle of the colors.
        :type swatchsize: int

        :param outfile: path to save the image to.
        :type outfile: str, bytes
        '''

    @classmethod
    def images_into_py(cls, folder='', files=[], pyfile='pyized_images.py', merge={}, prefix='PRMP', space=10, add_all=0, all_files=False):
        '''
        _author_ = PRMPSmart

        :param folder: a str path to a folder.
        :param pyfile: a str path to a python file to host the images.
        :param merge: a dict as follows ->
            {'png':
                {'image_1': image_1_data, 'image_2': image_2_data}, 
            'jpg':
                {'image_3': image_3_data, 'image_4': image_4_data}
            }
        :param prefix: name use as prefix of the ensuing dicts.
        :param space: space to leave before the next variable.
        '''
    @classmethod
    def get(cls, inbuilt, ext, decode=0): ...

    @classmethod
    def getBase64(cls,  inbuilt, ext): ...


class PRMP_ImagesDB(PRMP_AdvMixins, PRMP_StrMixins):
    defaultDB = ...
    defaultDB = ...

    @classmethod
    def PRMP_DB(cls): ...

    @classmethod
    def _open(cls, db_file, cursor=False):
        '''opens a connection
        db_file: path for the file or :memory:
        cursor: bool whether to return cursor or connection
        '''

    @classmethod
    def _getConnection(cls, db_file='', cursor=None):
        '''returns a connection
        db_file: path for the file or :memory:
        cursor:  cursor object
        '''

    @classmethod
    def _getCursor(cls, db_file='', connection=None):
        '''returns a cursor
        db_file: path for the file or :memory:
        connection: connection object
        '''

    @classmethod
    def _getName(cls, name):
        'strips the name to something modest'

    @classmethod
    def _getImagesDict(cls, images_folder, sub_folders=0):
        'returns dict of folders of images in a folder using their folder as their collective keys'
    
    @classmethod
    def _createDB(cls, db_file, images_dict):
        'initialize the database with the folders(keys) in the images_dict'
    
    @classmethod
    def _getData(cls, file): ...
    
    @classmethod
    def _fillDB(cls, cursor, images_dict):
        'fills the database with the images.'
    

    @classmethod
    def _createImageDB(cls, db_file, images_folder, sub_folders=False, obj=False):
        '''
        db_file: database path or :memory:
        images_folder: folder path to create database for
        sub_folders: bool, whether to recurse into the folders in the images_folder
        obj: bool, whether to return an instance of PRMP_IMageDB
        '''

    def __init__(self, db_file):...
    
    def addImages(self, images_folder, sub_folders=False): ...

    @classmethod
    def _getPRMPImage(cls, name, ext, data):
        'returns an instance of PRMP_ImageFile from the database data'

    @classmethod
    def _getPRMPImages(cls, images):
        'returns instances of PRMP_ImageFile from the database datas'
    
    @classmethod
    def _getImage(cls, table, name, raw=0, cursor=None, **kwargs):...
    def getImage(self, table, name, raw=0):...
    
    @classmethod
    def _getImages(cls, images_dict, **kwargs):
        '''
        images_dict: {table: [images]}
        '''

    def getImages(self, images_dict, **kwargs):...
    
    @classmethod
    def _getTable(cls, table, cursor=None, raw=0, **kwargs):...
    def getTable(self, table, raw=0): ...
    
    def saveImage(self, table, name, file_path=None):...

    def saveTable(self, table, folder=''):...
    
    def saveAll(self, folder=''):...

    def addImage(self, table, file):...

    def addTable(self, images_folder): ...
    
    def addTables(self, images_folder): ...

    @classmethod
    def _tableNames(cls, connection=None, **kwargs):...

    @classmethod
    def _tableImages(cls, table, connection=None, **kwargs):...
    
    @property
    def tableNames(self): ...
    
    def tableImages(self, table): ...

    @classmethod
    def _debugDB(cls, db_file='', connection=None, **kwargs): ...
    def debugDB(self): ...

    @classmethod
    def _createPyizedImage(cls, images_dict, pyfile='pyized_from_db.py', pyizedKwargs={}, **kwargs): ...
    def createPyizedImage(self, images_dict, py_file='pyized_from_db.py', **kwargs): ...


class PRMP_ImageFile(PRMP_File):

    @property
    def image(self): ...
    def __init__(self, imageFileName='', inbuilt=False, inExt='png', image=None, array=None, **kwargs): ...
    @property
    def ext(self): ...
    def save(self, file=None): ...

class PRMP_Image:
    count = 0
    def __init__(self, filename='', inbuilt=False, inExt='png', resize=(), thumb=(), image=None, b64=b'', name='', for_tk=False, array=None, bmp=False): ...
    def setTkImgClass(self): ...
    def createTkImage(self, name=''): ...
    def __str__(self): ...
    @property
    def animatedTkFrames(self): ...
    @property
    def animatedFrames(self): ...
    @property
    def interframe_durations(self): ...
    @property
    def name_n_ext(self): ...
    @property
    def basename(self): ...
    def resize(self, rz):  ...
    def get(self):  ...
    def resizeTk(self, rz):  ...
    def thumbnail(self, rz):  ...
    def thumbnailTk(self, rz): ...
    def copy(self): ...
    def fromarray(self, array, bgr2rgb=False): ...
    def toarray(self, rgb2bgr=False): ...
    def _find_faces(self, **kwargs):  ...
    @classmethod
    def find_faces(cls, cascPath='', image=None, array=None, as_image=False, prmp_image=False, **kwargs): ...

PRMP_DB = ...









inno_script_example =  ...

classifiers = ...
platforms = ...
keywords = ...
license_ = ...

class Holder: ...


class PRMP_Setup:

    def __init__(self, type_='NaN', *args, **kwargs): ...
    def build(self): ...
    def get_scripts(self, folder): ...
    def build_ext(self, folder='', scripts=[], description='', meta_datas={}, classifiers=classifiers, platforms=platforms, keywords=[], license='', name='', inplace=False, dest='', version='1.0', include_dirs=[]): ...
    def _build_ext(self): ...
    def pyinstaller(self, scripts=[], console=True, extra_commands=[], log_level='info', datas={}, binaries={}, name='', onefile=False, icon='', clean=False, noconfirm=False): ...
    def _pyinstaller(self):  ...

    def inno_setup(self, script='', old_ver='', new_ver='', gen_script=False, gui=False, customize=False, author='PRMP Smart'): ...
    def customize_script(self, script, old_ver='', new_ver='', author=''): ...
    def _inno_setup(self): ...
    def change_ext(self, file, ext): ...
    def py2c(self, file, quiet=False, embed=False, outfile='', pyver=2, dry_run=False): ...
    def create_dll(self, file, include_dir='', as_pyd=False, python_dll='', cython_it=False, outext='dll', quiet=False, dry_run=False, **kwargs): ...
    def _create_dll(self): ...
    def _create_exe(self, file, include_dir='', win=0, python_dll='', quiet=False, dry_run=False): ...



